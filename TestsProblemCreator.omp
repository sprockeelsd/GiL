; OM File Header - Saved 2023/06/15 10:05:24
; (7.03 :patc (om-make-point 45 23) (om-make-point 50 50) (om-make-point 889 623) "" 183 0 "2023/05/03 10:46:47" "2023/06/15 10:05:24")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "TestsProblemCreator" (quote ((let ((box (om-load-boxcall (quote lispfun) "SOLUTION-TO-INT-ARRAY" (quote |gilf|::solution-to-int-array) (quote ((om-load-inputfun (quote input-funbox) "SP" "SP" nil))) (om-make-point 352 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "RETURN-NEXT-SOLUTION-SPACE" (quote |gilf|::return-next-solution-space) (quote ((om-load-inputfun (quote input-funbox) "SOLVER" "SOLVER" nil))) (om-make-point 213 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CREATE-SOLVER" (quote |gilf|::create-solver) (quote ((om-load-inputfun (quote input-funbox) "SP" "SP" nil) (om-load-inputfun (quote input-funbox) "SOLVER-TYPE" "SOLVER-TYPE" nil))) (om-make-point 232 234) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DFS" (quote |gilf|::dfs) (quote nil) (om-make-point 432 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BAB" (quote |gilf|::bab) (quote nil) (om-make-point 323 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NEW-PROBLEM" (quote |gilf|::new-problem) (quote ((om-load-inputfun (quote input-funbox) "SIZE" "SIZE" nil) (om-load-inputfun (quote input-funbox) "LOWER-BOUND-DOMAIN" "LOWER-BOUND-DOMAIN" nil) (om-load-inputfun (quote input-funbox) "UPPER-BOUND-DOMAIN" "UPPER-BOUND-DOMAIN" nil))) (om-make-point 177 129) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 297 76) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 212 52) (om-make-point 25 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 159 61) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (5 0 2 0 nil 0) (4 0 2 1 nil 0) (8 0 5 0 nil 0) (7 0 5 1 nil 0) (6 0 5 2 nil 0))) nil 7.03))